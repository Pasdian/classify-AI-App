type Chat {
  chat_session: [Chat_session] @materializer(query: "chat_sessionUsingChat_session_chat_id_fkey")
  chatbot_characteristics: [Chatbot_characteristics]
    @materializer(query: "chatbot_characteristicsUsingChatbot_characteristics_chat_id_fkey")
  clerk_user_id: String!
  created_at: DateTime!
  id: Int!
  name: String!
}

type Chat_session {
  chat: Chat @materializer(query: "chatUsingChat_session_chat_id_fkey")
  chat_id: Int
  created_at: DateTime!
  guest: Guest @materializer(query: "guestUsingChat_session_guest_id_fkey")
  guest_id: Int
  id: Int!
  message: [Message] @materializer(query: "messageUsingMessage_chat_session_id_fkey")
}

type Chatbot_characteristics {
  chat: Chat @materializer(query: "chatUsingChatbot_characteristics_chat_id_fkey")
  chat_id: Int
  content: String!
  created_at: DateTime!
  id: Int!
}

type Guest {
  chat_session: [Chat_session] @materializer(query: "chat_sessionUsingChat_session_guest_id_fkey")
  created_at: DateTime!
  email: String
  id: Int!
  name: String
}

type Message {
  chat_session: Chat_session @materializer(query: "chat_sessionUsingMessage_chat_session_id_fkey")
  chat_session_id: Int
  content: String!
  created_at: DateTime!
  id: Int!
  sender: String!
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Chat' "
  chatsByUser(clerk_user_id: String!): [Chat]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chat"
      configuration: "postgresql_config"
    )

  chat(id: Int!): Chat
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chat"
      configuration: "postgresql_config"
    )
  chatList: [Chat]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chat"
      configuration: "postgresql_config"
    )
  chatPaginatedList(first: Int, after: Int): [Chat]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "clerk_user_id", "created_at", "id", "name" FROM "chat" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  chatUsingChat_session_chat_id_fkey(chat_id: Int!): Chat
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "clerk_user_id", "created_at", "id", "name" FROM "chat" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  chatUsingChatbot_characteristics_chat_id_fkey(chat_id: Int!): Chat
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "clerk_user_id", "created_at", "id", "name" FROM "chat" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Chat_session' "
  chat_session(id: Int!): Chat_session
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chat_session"
      configuration: "postgresql_config"
    )
  chat_sessionList: [Chat_session]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chat_session"
      configuration: "postgresql_config"
    )
  chat_sessionPaginatedList(first: Int, after: Int): [Chat_session]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "chat_id", "created_at", "guest_id", "id" FROM "chat_session" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  chat_sessionUsingChat_session_chat_id_fkey(id: Int!): [Chat_session]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "chat_id", "created_at", "guest_id", "id" FROM "chat_session" WHERE "chat_id" = $1
      """
      configuration: "postgresql_config"
    )
  chat_sessionUsingChat_session_guest_id_fkey(id: Int!): [Chat_session]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "chat_id", "created_at", "guest_id", "id" FROM "chat_session" WHERE "guest_id" = $1
      """
      configuration: "postgresql_config"
    )
  chat_sessionUsingMessage_chat_session_id_fkey(chat_session_id: Int!): Chat_session
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "chat_id", "created_at", "guest_id", "id" FROM "chat_session" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Chatbot_characteristics' "
  chatbot_characteristics(id: Int!): Chatbot_characteristics
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chatbot_characteristics"
      configuration: "postgresql_config"
    )
  chatbot_characteristicsList: [Chatbot_characteristics]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chatbot_characteristics"
      configuration: "postgresql_config"
    )
  chatbot_characteristicsPaginatedList(first: Int, after: Int): [Chatbot_characteristics]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "chat_id", "content", "created_at", "id" FROM "chatbot_characteristics" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  chatbot_characteristicsUsingChatbot_characteristics_chat_id_fkey(
    id: Int!
  ): [Chatbot_characteristics]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "chat_id", "content", "created_at", "id" FROM "chatbot_characteristics" WHERE "chat_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Guest' "
  guest(id: Int!): Guest
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "guest"
      configuration: "postgresql_config"
    )
  guestList: [Guest]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "guest"
      configuration: "postgresql_config"
    )
  guestPaginatedList(first: Int, after: Int): [Guest]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "email", "id", "name" FROM "guest" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  guestUsingChat_session_guest_id_fkey(guest_id: Int!): Guest
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "email", "id", "name" FROM "guest" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Message' "
  message(id: Int!): Message
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "message"
      configuration: "postgresql_config"
    )
  messageList: [Message]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "message"
      configuration: "postgresql_config"
    )
  messagePaginatedList(first: Int, after: Int): [Message]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "chat_session_id", "content", "created_at", "id", "sender" FROM "message" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  messageUsingMessage_chat_session_id_fkey(id: Int!): [Message]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "chat_session_id", "content", "created_at", "id", "sender" FROM "message" WHERE "chat_session_id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Chat' "
  deleteChat(id: Int!): Chat
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chat"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertChat(created_at: DateTime!, name: String!, clerk_user_id: String!): Chat
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chat"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateChat(id: Int!, clerk_user_id: String, created_at: DateTime, name: String): Chat
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "chat" SET
        "clerk_user_id" = COALESCE($2, "clerk_user_id"),
        "created_at" = COALESCE($3, "created_at"),
        "name" = COALESCE($4, "name")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Chat_session' "
  deleteChat_session(id: Int!): Chat_session
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chat_session"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertChat_session(created_at: DateTime!, guest_id: Int, chat_id: Int): Chat_session
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chat_session"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateChat_session(id: Int!, chat_id: Int, created_at: DateTime, guest_id: Int): Chat_session
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "chat_session" SET
        "chat_id" = COALESCE($2, "chat_id"),
        "created_at" = COALESCE($3, "created_at"),
        "guest_id" = COALESCE($4, "guest_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Chatbot_characteristics' "
  deleteChatbot_characteristics(id: Int!): Chatbot_characteristics
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chatbot_characteristics"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertChatbot_characteristics(
    created_at: DateTime!
    content: String!
    chat_id: Int
  ): Chatbot_characteristics
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "chatbot_characteristics"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateChatbot_characteristics(
    id: Int!
    chat_id: Int
    content: String
    created_at: DateTime
  ): Chatbot_characteristics
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "chatbot_characteristics" SET
        "chat_id" = COALESCE($2, "chat_id"),
        "content" = COALESCE($3, "content"),
        "created_at" = COALESCE($4, "created_at")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Guest' "
  deleteGuest(id: Int!): Guest
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "guest"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertGuest(created_at: DateTime!, email: String, name: String): Guest
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "guest"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateGuest(id: Int!, created_at: DateTime, email: String, name: String): Guest
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "guest" SET
        "created_at" = COALESCE($2, "created_at"),
        "email" = COALESCE($3, "email"),
        "name" = COALESCE($4, "name")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Message' "
  deleteMessage(id: Int!): Message
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "message"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertMessage(
    chat_session_id: Int
    content: String!
    sender: String!
    created_at: DateTime!
  ): Message
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "message"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateMessage(
    id: Int!
    chat_session_id: Int
    content: String
    created_at: DateTime
    sender: String
  ): Message
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "message" SET
        "chat_session_id" = COALESCE($2, "chat_session_id"),
        "content" = COALESCE($3, "content"),
        "created_at" = COALESCE($4, "created_at"),
        "sender" = COALESCE($5, "sender")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
